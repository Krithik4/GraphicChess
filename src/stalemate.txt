private boolean staleMate(){
        /**
         * Fix stalemate
         * case 1: two kings only -> done
         * case 2: no piece of the next turn can move
         */

        if (piecesShownOnBoard.size() == 2 && piecesShownOnBoard.get(0).getPieceType().equals("King") && piecesShownOnBoard.get(1).getPieceType().equals("King")){
            return true;
        }

        for (int i = 0; i < piecesShownOnBoard.size(); i++){
              Piece p = piecesShownOnBoard.get(i);
            if (p.getColor() != currentColor){
                String type = p.getPieceType();
                boolean canMove = false;
                switch (type){
                    case "King":
                        canMove = kingCanMove(p);
                        break;
                    case "Queen":
                        canMove = queenCanMove(p);
                        break;
                    case "Rook":
                        canMove = rookCanMove(p);
                        break;
                    case "Bishop":
                        canMove = bishopCanMove(p);
                        break;
                    case "Knight":
                        canMove = knightCanMove(p);
                        break;
                    case "Pawn":
                        canMove = pawnCanMove(p);
                        break;
                    default:
                        break;
                }
                copyPieces(pieces, piecesShownOnBoard);
                if (canMove){
                    return false;
                }
            }
        }

//        int count = 0;
//        for (Piece p : piecesShownOnBoard){
//            if (p.getColor() != currentColor){
//                count++;
//            }
//        }
//
//        if (count == 1){
//            if (!kingCanMove(getKing(true))){
//                return true;
//            }
//        }
//        return false;
        return true;
    }

public boolean knightCanMove(Piece knight){
        int col = knight.getCol();
        int row = knight.getRow();

        if (knight.canMove(col + 1, row - 2)){ //top right
            knight.setCol(col + 1);
            knight.setRow(row - 2);
            if (!kingInCheck()){
                knight.resetPosition();
                return true;
            }
        }
        knight.resetPosition();
        if (knight.canMove(col - 1, row - 2)){ //top left
            knight.setCol(col - 1);
            knight.setRow(row - 2);
            if (!kingInCheck()){
                knight.resetPosition();
                return true;
            }
        }
        knight.resetPosition();
        if (knight.canMove(col - 1, row + 2)){ //bottom left
            knight.setCol(col - 1);
            knight.setRow(row + 2);
            if (!kingInCheck()){
                knight.resetPosition();
                return true;
            }
        }
        knight.resetPosition();
        if (knight.canMove(col + 1, row + 2)){ //bottom right
            knight.setCol(col + 1);
            knight.setRow(row + 2);
            if (!kingInCheck()){
                knight.resetPosition();
                return true;
            }
        }
        knight.resetPosition();
        if (knight.canMove(col - 2, row - 1)){ //most left and 1 up
            knight.setCol(col - 2);
            knight.setRow(row - 1);
            if (!kingInCheck()){
                knight.resetPosition();
                return true;
            }
        }
        knight.resetPosition();
        if (knight.canMove(col + 2, row - 1)){ //most right and 1 up
            knight.setCol(col + 2);
            knight.setRow(row - 1);
            if (!kingInCheck()){
                knight.resetPosition();
                return true;
            }
        }
        knight.resetPosition();
        if (knight.canMove(col - 2, row + 1)){ //most left and 1 dow
            knight.setCol(col - 2);
            knight.setRow(row + 1);
            if (!kingInCheck()){
                knight.resetPosition();
                return true;
            }
        }
        knight.resetPosition();
        if (knight.canMove(col + 2, row + 1)){ //most right and 1 dow
            knight.setCol(col + 2);
            knight.setRow(row + 1);
            if (!kingInCheck()){
                knight.resetPosition();
                return true;
            }
        }
        knight.resetPosition();
        return false;
    }

    public boolean pawnCanMove(Piece pawn){
        int moveIncrement = (currentColor == WHITE) ? -1 : 1;
        int col = pawn.getCol();
        int row = pawn.getRow();

        if (pawn.canMove(col, row + moveIncrement)){
            pawn.setRow(row + moveIncrement);
            if (!kingInCheck()){
                pawn.resetPosition();
                return true;
            }
        }
        pawn.resetPosition();
        if (pawn.canMove(col, row + moveIncrement * 2)){
            pawn.setRow(row + moveIncrement * 2);
            if (!kingInCheck()){
                pawn.resetPosition();
                return true;
            }
        }
        pawn.resetPosition();
        if (pawn.canMove(col + 1, row + moveIncrement)){
            pawn.setCol(col + 1);
            pawn.setRow(row + moveIncrement);
            if (!kingInCheck()){
                pawn.resetPosition();
                return true;
            }
        }
        pawn.resetPosition();
        if (pawn.canMove(col - 1, row + moveIncrement)){
            pawn.setCol(col - 1);
            pawn.setRow(row + moveIncrement);
            if (!kingInCheck()){
                pawn.resetPosition();
                return true;
            }
        }
        pawn.resetPosition();
        return false;
    }

    public boolean rookCanMove(Piece rook){
        int col = rook.getCol();
        int row = rook.getRow();

        for (int i = -7; i < 8; i++){
            if (rook.canMove(col + i, row)){
                rook.setCol(col + i);
                if (!kingInCheck()){
                    rook.resetPosition();
                    return true;
                }
            }
            rook.resetPosition();
            if (rook.canMove(col, row + i)){
                rook.setRow(row + i);
                if (!kingInCheck()){
                    rook.resetPosition();
                    return true;
                }
            }
            rook.resetPosition();
        }
        rook.resetPosition();
        return false;
    }

    public boolean bishopCanMove(Piece bishop){
        int col = bishop.getCol();
        int row = bishop.getRow();

        for (int i = -7; i < 8; i++){
            if (bishop.canMove(col + i, row + i)){
                bishop.setCol(col + i);
                bishop.setRow(row + i);
                if (!kingInCheck()){
                    bishop.resetPosition();
                    return true;
                }
            }
            bishop.resetPosition();
            if (bishop.canMove(col + i, row - i)){
                bishop.setCol(col + i);
                bishop.setRow(row - i);
                if (!kingInCheck()){
                    bishop.resetPosition();
                    return true;
                }
            }
            bishop.resetPosition();
            if (bishop.canMove(col - i, row - i)){
                bishop.setCol(col - i);
                bishop.setRow(row - i);
                if (!kingInCheck()){
                    bishop.resetPosition();
                    return true;
                }
            }
            bishop.resetPosition();
            if (bishop.canMove(col + i, row - i)){
                bishop.setCol(col + i);
                bishop.setRow(row - i);
                if (!kingInCheck()){
                    bishop.resetPosition();
                    return true;
                }
            }
            bishop.resetPosition();
        }
        bishop.resetPosition();
        return false;
    }

    public boolean queenCanMove(Piece queen){
        int col = queen.getCol();
        int row = queen.getRow();

        for (int i = -7; i < 8; i++){
            if (queen.canMove(col + i, row)){
                queen.setCol(col + i);
                if (!kingInCheck()){
                    queen.resetPosition();
                    return true;
                }
            }
            queen.resetPosition();
            if (queen.canMove(col, row + i)){
                queen.setRow(row + i);
                if (!kingInCheck()){
                    queen.resetPosition();
                    return true;
                }
            }
            queen.resetPosition();

            if (queen.canMove(col + i, row + i)){
                queen.setCol(col + i);
                queen.setRow(row + i);
                if (!kingInCheck()){
                    queen.resetPosition();
                    return true;
                }
            }
            queen.resetPosition();
            if (queen.canMove(col + i, row - i)){
                queen.setCol(col + i);
                queen.setRow(row - i);
                if (!kingInCheck()){
                    queen.resetPosition();
                    return true;
                }
            }
            queen.resetPosition();
            if (queen.canMove(col - i, row - i)){
                queen.setCol(col - i);
                queen.setRow(row - i);
                if (!kingInCheck()){
                    queen.resetPosition();
                    return true;
                }
            }
            queen.resetPosition();
            if (queen.canMove(col + i, row - i)){
                queen.setCol(col + i);
                queen.setRow(row - i);
                if (!kingInCheck()){
                    queen.resetPosition();
                    return true;
                }
            }
            queen.resetPosition();
        }

        queen.resetPosition();
        return false;
    }

 NEW STUFF
private boolean staleMate(){
        if (piecesShownOnBoard.size() == 2){
            //only kings are left
            return true;
        }

        boolean kingCantMove = !kingCanMove(getKing(true));

        for (Piece p : pieces){
            if (p.getColor() != currentColor && p != getKing(true)){
                String pType = p.getPieceType();
                switch (pType){
                    case "Pawn":
                        if (pawnCanMove(p)){return false;}
                        break;
                    case "Knight":
                        if (knightCanMove(p)){return false;}
                        break;
                    case "Bishop":
                        if (bishopCanMove(p)){return false;}
                        break;
                    case "Rook":
                        if (rookCanMove(p)){return false;}
                        break;
                    case "Queen":
                        if (queenCanMove(p)){return false;}
                        break;
                }
            }
        }
        return kingCantMove;
    }

    public boolean pawnCanMove(Piece pawn){
        int[] colDiff = {0, 0, 1, -1};
        int[] rowDiff = {1, 2, 1, 1};
        for (int i = 0; i < colDiff.length; i++){
            rowDiff[i] = (pawn.getColor() == WHITE) ? rowDiff[i] * -1 : rowDiff[i];
            pawn.setCol(pawn.getCol() + colDiff[i]);
            pawn.setRow(pawn.getRow() + rowDiff[i]);
            if (pawn.canMove(pawn.getCol(), pawn.getRow())){
                if (pawn.getCapturedP() != null){
                    piecesShownOnBoard.remove(pawn.getCapturedP());
                }
                if (!kingInCheck()){
                    pawn.resetPosition();
                    copyPieces(pieces, piecesShownOnBoard);
                    return true;
                }
            }
            pawn.resetPosition();
            copyPieces(pieces, piecesShownOnBoard);
        }
        return false;
    }

    public boolean knightCanMove(Piece knight){
        int [] colDiff = {-2, -2, -1, -1, 1, 1, 2, 2};
        int [] rowDiff = {-1, 1, -2, 2, -2, 2, -1, 1};

        for (int i = 0; i < colDiff.length; i++){
            knight.setCol(knight.getCol() + colDiff[i]);
            knight.setRow(knight.getRow() + rowDiff[i]);
            if (knight.canMove(knight.getCol(), knight.getRow())){
                if (knight.getCapturedP() != null){
                    piecesShownOnBoard.remove(knight.getCapturedP());
                }
                if (!kingInCheck()){
                    knight.resetPosition();
                    copyPieces(pieces, piecesShownOnBoard);
                    return true;
                }
            }
            knight.resetPosition();
            copyPieces(pieces, piecesShownOnBoard);
        }
        return false;
    }

    public boolean bishopCanMove(Piece bishop){
        int[] colDiff = {1, 2, 3, 4, 5, 6, 7, -7, -6, -5, -4, -3, -2, -1};
        int[] rowDiff = {1, 2, 3, 4, 5, 6, 7, -7, -6, -5, -4, -3, -2, -1};

        for (int i = 0; i < colDiff.length; i++){
            bishop.setCol(bishop.getCol() + colDiff[i]);
            bishop.setRow(bishop.getRow() + rowDiff[i]);
            if (bishop.canMove(bishop.getCol(), bishop.getRow())){
                if (bishop.getCapturedP() != null){
                    piecesShownOnBoard.remove(bishop.getCapturedP());
                }
                if (!kingInCheck()){
                    bishop.resetPosition();
                    copyPieces(pieces, piecesShownOnBoard);
                    return true;
                }
            }
            bishop.resetPosition();
            copyPieces(pieces, piecesShownOnBoard);
        }
        return false;
    }

    public boolean rookCanMove(Piece rook){
        int[] colDiff = {1, 2, 3, 4, 5, 6, 7, -7, -6, -5, -4, -3, -2, -1};
        int[] rowDiff = {1, 2, 3, 4, 5, 6, 7, -7, -6, -5, -4, -3, -2, -1};

        for (int i = 0; i < colDiff.length * 2; i++){
            if (i < colDiff.length){
                rook.setCol(rook.getCol() + colDiff[i]);
            } else {
                rook.setRow(rook.getRow() + rowDiff[i - colDiff.length]);
            }
            //rook.setCol(rook.getCol() + colDiff[i]);
            if (rook.canMove(rook.getCol(), rook.getRow())){
                if (rook.getCapturedP() != null){
                    piecesShownOnBoard.remove(rook.getCapturedP());
                }
                if (!kingInCheck()){
                    rook.resetPosition();
                    copyPieces(pieces, piecesShownOnBoard);
                    return true;
                }
            }
            rook.resetPosition();
            copyPieces(pieces, piecesShownOnBoard);
        }

//        for (int i = 0; i < rowDiff.length; i++){
//            rook.setRow(rook.getRow() + rowDiff[i]);
//            if (rook.canMove(rook.getCol(), rook.getRow())){
//                if (rook.getCapturedP() != null){
//                    piecesShownOnBoard.remove(rook.getCapturedP());
//                }
//                if (!kingInCheck()){
//                    rook.resetPosition();
//                    copyPieces(pieces, piecesShownOnBoard);
//                    return true;
//                }
//            }
//            rook.resetPosition();
//            copyPieces(pieces, piecesShownOnBoard);
//        }
        return false;
    }

    public boolean queenCanMove(Piece queen){
        int[] colDiff = {1, 2, 3, 4, 5, 6, 7, -7, -6, -5, -4, -3, -2, -1};
        int[] rowDiff = {1, 2, 3, 4, 5, 6, 7, -7, -6, -5, -4, -3, -2, -1};

        for (int i = 0; i < colDiff.length; i++){ //diag
            queen.setCol(queen.getCol() + colDiff[i]);
            queen.setRow(queen.getRow() + rowDiff[i]);
            if (queen.canMove(queen.getCol(), queen.getRow())){
                if (queen.getCapturedP() != null){
                    piecesShownOnBoard.remove(queen.getCapturedP());
                }
                if (!kingInCheck()){
                    queen.resetPosition();
                    copyPieces(pieces, piecesShownOnBoard);
                    return true;
                }
            }
            queen.resetPosition();
            copyPieces(pieces, piecesShownOnBoard);
        }

        for (int i = 0; i < colDiff.length; i++){ //right left
            queen.setCol(queen.getCol() + colDiff[i]);
            if (queen.canMove(queen.getCol(), queen.getRow())){
                if (queen.getCapturedP() != null){
                    piecesShownOnBoard.remove(queen.getCapturedP());
                }
                if (!kingInCheck()){
                    queen.resetPosition();
                    copyPieces(pieces, piecesShownOnBoard);
                    return true;
                }
            }
            queen.resetPosition();
            copyPieces(pieces, piecesShownOnBoard);
        }

        for (int i = 0; i < rowDiff.length; i++){ //up down
            queen.setRow(queen.getRow() + rowDiff[i]);
            if (queen.canMove(queen.getCol(), queen.getRow())){
                if (queen.getCapturedP() != null){
                    piecesShownOnBoard.remove(queen.getCapturedP());
                }
                if (!kingInCheck()){
                    queen.resetPosition();
                    copyPieces(pieces, piecesShownOnBoard);
                    return true;
                }
            }
            queen.resetPosition();
            copyPieces(pieces, piecesShownOnBoard);
        }
        return false;
    }